# Copyright 2019 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Generates hashing code for string."""

import json
import re
import sys
from typing import List  # pylint: disable=unused-import

import farmhash


def _generate_unsigned_hash_code(strings, max_hash_value=sys.maxsize):
  # type: (List[str], int) -> int
  """Generates a forever-fixed hash code for `strings`.

  The hash code generated is in the range [0, max_hash_value). Note that the
  hash code generated by farmhash.fingerprint64 is unsigned.
  """
  return farmhash.fingerprint64(json.dumps(strings)) % max_hash_value

def generate_sample_id(sample_name, file_path=''):
  # type: (str, str) -> int
  """Generates sample_id based on hashed value of sample name and file path.

  The hash code generated is in the range [0, pow(2, 63)).
  """
  if file_path:
    strings = [create_composite_sample_name(sample_name, file_path)]
  else:
    strings = [sample_name]
  return _generate_unsigned_hash_code(strings, max_hash_value=pow(2, 63))

def create_composite_sample_name(sample_name, file_path):
  # type: (str, str) -> str
  """Replaces special chr in file_path with _ concatenates sample_name to it."""
  if not sample_name or not file_path:
    raise ValueError(
        'Both sample_name and file_path are expected to be not empty strings.')
  simplified_file_path = re.sub(r'\W', '_', file_path)
  return '_'.join([simplified_file_path, sample_name])
